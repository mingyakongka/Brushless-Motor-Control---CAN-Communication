////can口接收数据查询 轮询
////buf:数据缓存区;	 
////返回值:0,无数据被收到;
////其他,接收的数据长度;
//u8 Can_Receive_Msg(u8 *buf)
//{		   		   
//		u32 i;
//		CanRxMsg RxMessage;
//    if( CAN_MessagePending(CAN1,CAN_FIFO0)==0)
//		return 0;		//没有接收到数据,直接退出 
//		
//    CAN_Receive(CAN1,CAN_FIFO0, &RxMessage);//读取数据	
//    for(i=0;i<8;i++)
//		{
//			buf[i]=RxMessage.Data[i];  
//		}
//	  return RxMessage.DLC;	
//}


//		 for(k=0;k<6;k++)
//			 {	
//				 printf("%d:",data_ch[k]);
//         sprintf(Hex, "%X",data_ch[k]);
//         printf("%s ", Hex);
//				 if(k == 5)
//				 {
//					 printf("%d: ",contrl_flag);
//				   printf("\r\n");//换行下一个
//				}	
//           }


 for(k=0;k<6;k++)
			 {	
				 real_data[k]=data_ch[k]-1000;//减去归零时候的值
				 printf("%d:",real_data[k]);
         sprintf(Hex, "%X",real_data[k]);//转换为十六进制
         printf("%s ", Hex);
				 if(k == 5)
				 {
					 printf("%d: ",contrl_flag);
				   printf("\r\n");//换行下一个
				}	
          	}
			
			
			
			
			
			//		 for(k=0;k<4;k++)
//		{
//			 printf("%c", Hex[k]);
//			if(k==9)
//				printf("\r\n");
//		}
//				 for(k=0;k<6;k++)
//			 {	
//				 real_data[k]=data_ch[k]-1000;//减去归零时候的值
//				 printf("%d:",real_data[k]);
//         sprintf(Hex, "%X",real_data[k]);//转换为十六进制
//         printf("%s ", Hex);
//				 if(k == 5)
//				 {
//					 printf("%d: ",contrl_flag);
//				   printf("\r\n");//换行下一个
//				}	
//          	}



//检测SBUS输出
//				 for(k=0;k<6;k++)
//			 {	
//				 printf("%d:",data_ch[k]);
//         sprintf(Hex, "%X",data_ch[k]);
//         printf("%s ", Hex);
//				 if(k == 5)
//				 {
//					 printf("%d: ",contrl_flag);
//				   printf("\r\n");//换行下一个
//				 }	
//        }

//	real_data[0]=1000-1100;//减去归零时候的值
//	printf("实际的数%d:",real_data[0]);
////	把有符号整形 转换为16进制 两个字节 
//  sprintf(Hex,"%04X",(unsigned short)real_data[0]);//转换为十六进制
//  printf("转换后的数%s ",Hex);
//	
//  printf("转换后的数组%c %c %c %c",Hex[0],Hex[1],Hex[2],Hex[3]);
//  printf("\r\n");//换行下一个
//		
//	h1=(char)((hexcharToInt(Hex[0])<<4)|hexcharToInt(Hex[1]));//将sprintf转换后的第一个和第二个16进制数拼接成一个16进制数
//	h2=(char)((hexcharToInt(Hex[2])<<4)|hexcharToInt(Hex[3]));//将sprintf转换后的第三个和第四个16进制数拼接成一个16进制数
//	printf("拼接后的第一位16进制数:%X，拼接后的第二位16进制数:%X\n",h1,h2);
	
	
	
	//按键处理函数
//返回按键值
//mode:0,不支持连续按;1,支持连续按;
//0，没有任何按键按下
//1，KEY0按下
//2，KEY1按下
//注意此函数有响应优先级,KEY0>KEY1
//u8 KEY_Scan(u8 mode)
//{	 
//	static u8 key_up=1;//按键按松开标志
//	if(mode)
//	{
//		key_up=1;  //支持连按	
//	}	  
//	if(key_up&&(KEY0==0||KEY1==0))//按键按下
//	{
//		delay_ms(20);//去抖动 
//		key_up=0;
//		if(KEY0==0)
//			return KEY0_PRES;
//		if(KEY1==0)
//			return KEY1_PRES;
//	}
//	else if(KEY0==1&&KEY1==1)//没有按下
//	   key_up=1; 	    
// 	return 0;// 无按键按下
//}